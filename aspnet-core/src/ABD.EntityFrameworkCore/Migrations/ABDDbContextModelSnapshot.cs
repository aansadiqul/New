// <auto-generated />
using System;
using ABD.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ABD.Migrations
{
    [DbContext(typeof(ABDDbContext))]
    partial class ABDDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ABD.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("ABD.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("ABD.Entities.ADOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACHAccount");

                    b.Property<string>("ACHAccountName");

                    b.Property<string>("ACHCheck");

                    b.Property<string>("ACHRouting");

                    b.Property<string>("AccountIds");

                    b.Property<bool?>("Active");

                    b.Property<string>("Affiliations");

                    b.Property<string>("AgencyManagement");

                    b.Property<string>("AgencyMgntCriteria");

                    b.Property<string>("AreaCode");

                    b.Property<string>("BillAddress")
                        .HasMaxLength(255);

                    b.Property<string>("BillCity")
                        .HasMaxLength(255);

                    b.Property<string>("BillCompany")
                        .HasMaxLength(255);

                    b.Property<string>("BillCountry")
                        .HasMaxLength(255);

                    b.Property<string>("BillFName")
                        .HasMaxLength(255);

                    b.Property<string>("BillLName")
                        .HasMaxLength(255);

                    b.Property<string>("BillState")
                        .HasMaxLength(255);

                    b.Property<string>("BillZip")
                        .HasMaxLength(255);

                    b.Property<string>("CardNumber");

                    b.Property<string>("CheckNo")
                        .HasMaxLength(255);

                    b.Property<string>("CommPercent")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyLines");

                    b.Property<string>("Country");

                    b.Property<string>("County");

                    b.Property<string>("CountyIDs");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CtCount");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(128);

                    b.Property<string>("EmpSize")
                        .HasMaxLength(255);

                    b.Property<string>("ExcludeAreaCode");

                    b.Property<string>("ExcludeCountiesList");

                    b.Property<string>("ExcludeCountyIds");

                    b.Property<string>("ExcludeMSA");

                    b.Property<string>("ExcludeState");

                    b.Property<string>("ExcludeZip");

                    b.Property<bool?>("IsCtPurchased");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LinesSearch");

                    b.Property<string>("LinesSearchCriteria");

                    b.Property<string>("MSA");

                    b.Property<string>("OrderNotes");

                    b.Property<int?>("OrderType");

                    b.Property<decimal?>("OrderValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("OverRideNotes");

                    b.Property<string>("PEmpCriteria")
                        .HasMaxLength(255);

                    b.Property<string>("PVolume")
                        .HasMaxLength(255);

                    b.Property<string>("QueryCriteria");

                    b.Property<int?>("QueryID");

                    b.Property<int?>("RecordCount");

                    b.Property<string>("RevenueCriteria")
                        .HasMaxLength(255);

                    b.Property<string>("RevenueValue");

                    b.Property<string>("SICCodes");

                    b.Property<string>("SICIDS");

                    b.Property<string>("SUserId")
                        .HasMaxLength(64);

                    b.Property<string>("SalesUser")
                        .HasMaxLength(255);

                    b.Property<string>("State");

                    b.Property<string>("TitleSearch");

                    b.Property<string>("TitleSearchCriteria");

                    b.Property<int?>("TranType");

                    b.Property<string>("TransactionID")
                        .HasMaxLength(255);

                    b.Property<string>("TypeCriteria");

                    b.Property<string>("TypeField");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("ADOrders");
                });

            modelBuilder.Entity("ABD.Entities.ADSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QueryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<string>("Affiliations");

                    b.Property<string>("AgencyManagement");

                    b.Property<string>("AgencyMgntCriteria")
                        .HasMaxLength(255);

                    b.Property<string>("AreaCode");

                    b.Property<string>("CarrierManageCrieteria")
                        .HasMaxLength(255);

                    b.Property<string>("CommPercent")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyLines");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyNameType")
                        .HasMaxLength(255);

                    b.Property<string>("Country")
                        .HasMaxLength(255);

                    b.Property<string>("County");

                    b.Property<string>("CountyIDs");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmpSize")
                        .HasMaxLength(255);

                    b.Property<string>("ExcludeAreaCode");

                    b.Property<string>("ExcludeCountiesList");

                    b.Property<string>("ExcludeCountyIds");

                    b.Property<string>("ExcludeMSA");

                    b.Property<string>("ExcludeState");

                    b.Property<string>("ExcludeZip");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LinesSearch");

                    b.Property<string>("LinesSearchCriteria")
                        .HasMaxLength(255);

                    b.Property<string>("MSA");

                    b.Property<string>("MinorityOwned")
                        .HasMaxLength(2);

                    b.Property<string>("PEmpCriteria")
                        .HasMaxLength(255);

                    b.Property<string>("PVolume")
                        .HasMaxLength(255);

                    b.Property<string>("QueryCriteria");

                    b.Property<string>("QueryName")
                        .HasMaxLength(255);

                    b.Property<string>("RevenueCriteria")
                        .HasMaxLength(255);

                    b.Property<string>("RevenueValue")
                        .HasMaxLength(255);

                    b.Property<string>("SICCodes");

                    b.Property<string>("SICIDS");

                    b.Property<string>("State");

                    b.Property<string>("TitleSearch");

                    b.Property<string>("TitleSearchCriteria")
                        .HasMaxLength(255);

                    b.Property<string>("TypeCriteria");

                    b.Property<string>("TypeField");

                    b.Property<string>("Zip");

                    b.Property<string>("countyConcatenated");

                    b.Property<string>("msaConcatenated");

                    b.HasKey("Id");

                    b.ToTable("ADSearches");
                });

            modelBuilder.Entity("ABD.Entities.AMGList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AList")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.ToTable("AMGList");
                });

            modelBuilder.Entity("ABD.Entities.Affiliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .HasMaxLength(128);

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("char(12)");

                    b.Property<string>("SpecialAffiliation")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("SplAffDB");
                });

            modelBuilder.Entity("ABD.Entities.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .HasMaxLength(128);

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("char(12)");

                    b.Property<string>("Address1")
                        .HasMaxLength(128);

                    b.Property<string>("Address2")
                        .HasMaxLength(128);

                    b.Property<string>("AgencyManagement")
                        .HasMaxLength(128);

                    b.Property<string>("BranchIndicator")
                        .HasMaxLength(128);

                    b.Property<string>("CEmail")
                        .HasMaxLength(128);

                    b.Property<string>("CEmail2")
                        .HasMaxLength(128);

                    b.Property<string>("CFacebookUrl")
                        .HasMaxLength(128);

                    b.Property<string>("CGoogleplusUrl")
                        .HasMaxLength(128);

                    b.Property<string>("CLinkedin")
                        .HasMaxLength(128);

                    b.Property<string>("CTwitterUrl")
                        .HasMaxLength(128);

                    b.Property<string>("CYoutubeUrl")
                        .HasMaxLength(128);

                    b.Property<string>("City")
                        .HasMaxLength(128);

                    b.Property<string>("Country")
                        .HasMaxLength(128);

                    b.Property<string>("County")
                        .HasMaxLength(128);

                    b.Property<string>("CountyCode")
                        .HasMaxLength(128);

                    b.Property<string>("Division")
                        .HasMaxLength(128);

                    b.Property<string>("DunsNum")
                        .HasColumnType("char(12)");

                    b.Property<string>("Email")
                        .HasMaxLength(128);

                    b.Property<int?>("Employees");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(128);

                    b.Property<string>("Fax")
                        .HasMaxLength(128);

                    b.Property<string>("FirstName")
                        .HasMaxLength(128);

                    b.Property<int?>("GeoCodeStatus");

                    b.Property<string>("GoogleplusUrl")
                        .HasMaxLength(128);

                    b.Property<string>("LastName")
                        .HasMaxLength(128);

                    b.Property<double?>("Latitude");

                    b.Property<string>("LineSearch")
                        .HasMaxLength(128);

                    b.Property<string>("LinkedUrl")
                        .HasMaxLength(128);

                    b.Property<string>("Linkedin")
                        .HasMaxLength(128);

                    b.Property<double?>("Longitude");

                    b.Property<string>("MainPhone")
                        .HasMaxLength(128);

                    b.Property<string>("Mobile")
                        .HasMaxLength(128);

                    b.Property<string>("Msa")
                        .HasMaxLength(128);

                    b.Property<int?>("Num_Locations");

                    b.Property<int?>("PercentComm");

                    b.Property<string>("PhoneExtension")
                        .HasMaxLength(128);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(128);

                    b.Property<decimal?>("PremiumVolume")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Producer")
                        .HasMaxLength(128);

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("SpLines")
                        .HasMaxLength(128);

                    b.Property<string>("SpecialAffiliation")
                        .HasMaxLength(128);

                    b.Property<string>("State")
                        .HasMaxLength(128);

                    b.Property<string>("Suffix")
                        .HasMaxLength(128);

                    b.Property<string>("TimeZone")
                        .HasMaxLength(128);

                    b.Property<string>("Title")
                        .HasMaxLength(128);

                    b.Property<string>("TitleSearch")
                        .HasMaxLength(128);

                    b.Property<string>("TollFree")
                        .HasMaxLength(128);

                    b.Property<string>("TwitterUrl")
                        .HasMaxLength(128);

                    b.Property<string>("Type")
                        .HasMaxLength(128);

                    b.Property<string>("WebAddress")
                        .HasMaxLength(128);

                    b.Property<string>("YoutubeUrl")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("AgencyDB");
                });

            modelBuilder.Entity("ABD.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaCode")
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("RS_AreaCodes");
                });

            modelBuilder.Entity("ABD.Entities.BDOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<string>("CCAuthorization")
                        .HasMaxLength(50);

                    b.Property<string>("CCNum");

                    b.Property<string>("CCTransactionId")
                        .HasMaxLength(50);

                    b.Property<string>("CheckNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CreditsUsed");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("OrderNotes");

                    b.Property<decimal?>("OrderValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50);

                    b.Property<int?>("RecordCount");

                    b.Property<decimal?>("RecordPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SalesUser")
                        .HasMaxLength(100);

                    b.Property<int>("SearchID");

                    b.Property<decimal?>("XDateOrdValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("XDatesOrderAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("XDatesPurchased");

                    b.Property<int?>("XDatesPurchasedCnt");

                    b.HasKey("Id");

                    b.ToTable("BDOrders");
                });

            modelBuilder.Entity("ABD.Entities.BDSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SearchID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaCode");

                    b.Property<string>("CompanyAndOr")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyBeginsContains")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100);

                    b.Property<string>("County");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<decimal?>("EmployeesFrom")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("EmployeesTo")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Exclude_AreaCode");

                    b.Property<string>("Exclude_County");

                    b.Property<string>("Exclude_MSA");

                    b.Property<string>("Exclude_State");

                    b.Property<string>("Exclude_Zip");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Locations")
                        .HasMaxLength(500);

                    b.Property<string>("MSA");

                    b.Property<string>("Manufacturing")
                        .HasMaxLength(500);

                    b.Property<int?>("OriginalCount");

                    b.Property<string>("Queryfilename")
                        .HasMaxLength(255);

                    b.Property<string>("SIC");

                    b.Property<string>("SICIDs");

                    b.Property<string>("SQLQuery");

                    b.Property<decimal?>("SalesFrom")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("SalesTo")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("SearchName")
                        .HasMaxLength(100);

                    b.Property<string>("State")
                        .HasMaxLength(3000);

                    b.Property<string>("XDatesMonth")
                        .HasMaxLength(100);

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("BDSearches");
                });

            modelBuilder.Entity("ABD.Entities.BdPurchasedData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DUNSNumber")
                        .HasMaxLength(20);

                    b.Property<int>("OrderID");

                    b.Property<string>("RecordType")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("IL_Purchased");
                });

            modelBuilder.Entity("ABD.Entities.Carrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .HasMaxLength(100);

                    b.Property<string>("AccountId")
                        .HasColumnType("char(12)");

                    b.Property<string>("CompanyLine")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ClinesDB");
                });

            modelBuilder.Entity("ABD.Entities.CarrierLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CarrierLines");
                });

            modelBuilder.Entity("ABD.Entities.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsRetail");

                    b.Property<bool?>("IsWholesale");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");
                });

            modelBuilder.Entity("ABD.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .HasMaxLength(128);

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("char(12)");

                    b.Property<string>("Address1")
                        .HasMaxLength(128);

                    b.Property<string>("Address2")
                        .HasMaxLength(128);

                    b.Property<string>("AgencyManagement")
                        .HasMaxLength(128);

                    b.Property<string>("BranchIndicator")
                        .HasMaxLength(128);

                    b.Property<string>("CEmail")
                        .HasMaxLength(128);

                    b.Property<string>("CEmail2")
                        .HasMaxLength(128);

                    b.Property<string>("City")
                        .HasMaxLength(128);

                    b.Property<string>("ContactId")
                        .HasColumnType("char(12)");

                    b.Property<string>("Country")
                        .HasMaxLength(128);

                    b.Property<string>("County")
                        .HasMaxLength(128);

                    b.Property<string>("CountyCode")
                        .HasMaxLength(128);

                    b.Property<string>("Division")
                        .HasMaxLength(128);

                    b.Property<string>("DunsNum")
                        .HasColumnType("char(12)");

                    b.Property<string>("Email")
                        .HasMaxLength(128);

                    b.Property<int?>("Employees");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(128);

                    b.Property<string>("Fax")
                        .HasMaxLength(128);

                    b.Property<string>("FirstName")
                        .HasMaxLength(128);

                    b.Property<string>("GoogleplusUrl")
                        .HasMaxLength(128);

                    b.Property<string>("IsPrimary")
                        .HasColumnType("char(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(128);

                    b.Property<string>("LineSearch")
                        .HasMaxLength(128);

                    b.Property<string>("LinkedUrl")
                        .HasMaxLength(128);

                    b.Property<string>("Linkedin")
                        .HasMaxLength(128);

                    b.Property<string>("MSA");

                    b.Property<string>("MainPhone")
                        .HasMaxLength(128);

                    b.Property<string>("Mobile")
                        .HasMaxLength(128);

                    b.Property<int?>("Num_Locations");

                    b.Property<int?>("PercentComm");

                    b.Property<string>("PhoneExtension")
                        .HasMaxLength(128);

                    b.Property<string>("PostCode")
                        .HasMaxLength(128);

                    b.Property<double?>("PremiumVolume");

                    b.Property<string>("Producer")
                        .HasMaxLength(128);

                    b.Property<decimal?>("Revenue")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("SpecialAffiliation")
                        .HasMaxLength(128);

                    b.Property<string>("State")
                        .HasMaxLength(128);

                    b.Property<string>("Suffix")
                        .HasMaxLength(128);

                    b.Property<string>("TimeZone")
                        .HasMaxLength(128);

                    b.Property<string>("Title")
                        .HasMaxLength(128);

                    b.Property<string>("TitleSearch")
                        .HasMaxLength(128);

                    b.Property<string>("TollFree")
                        .HasMaxLength(128);

                    b.Property<string>("TwitterUrl");

                    b.Property<string>("Type")
                        .HasMaxLength(128);

                    b.Property<string>("WebAddress")
                        .HasMaxLength(128);

                    b.Property<string>("YoutubeUrl")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("ContactsDB");
                });

            modelBuilder.Entity("ABD.Entities.ContactTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ContactTitles");
                });

            modelBuilder.Entity("ABD.Entities.ContactsListEmailCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Contacts");

                    b.Property<int?>("ContactsWithEmail");

                    b.Property<int?>("Locations");

                    b.Property<string>("Type")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("ContactsListEmailCount");
                });

            modelBuilder.Entity("ABD.Entities.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountyCode")
                        .HasMaxLength(10);

                    b.Property<string>("CountyCodeActual")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasMaxLength(30);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("RS_Counties");
                });

            modelBuilder.Entity("ABD.Entities.DNBFIPSCountyCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("County")
                        .HasMaxLength(20);

                    b.Property<string>("CountyCode")
                        .HasMaxLength(3);

                    b.Property<string>("FIPSCountyCode")
                        .HasMaxLength(3);

                    b.Property<string>("FIPSStateCode")
                        .HasMaxLength(2);

                    b.Property<string>("FIPSStateCountyCode")
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("StateCode")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("RS_DNB_FIPSCOUNTYCODES");
                });

            modelBuilder.Entity("ABD.Entities.DNBSIC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("SIC")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("RS_DNB_SICs");
                });

            modelBuilder.Entity("ABD.Entities.DNBSMSA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SMSAID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SMSA")
                        .HasMaxLength(64);

                    b.Property<string>("SMSACode")
                        .HasMaxLength(10);

                    b.Property<string>("SMSAStateCode")
                        .HasMaxLength(64);

                    b.Property<string>("State")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("RS_DNB_SMSAs");
                });

            modelBuilder.Entity("ABD.Entities.DNBZipCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("RS_DNB_ZipCodes");
                });

            modelBuilder.Entity("ABD.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ParentId")
                        .HasMaxLength(50);

                    b.Property<int?>("PositionCount");

                    b.Property<string>("SIC")
                        .HasMaxLength(50);

                    b.Property<string>("SICId")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("RS_SICs");
                });

            modelBuilder.Entity("ABD.Entities.MetroArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("RS_MSAs");
                });

            modelBuilder.Entity("ABD.Entities.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("ABD.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CreditCardMusked");

                    b.Property<string>("CustomerName");

                    b.Property<string>("ExternalTransactionId");

                    b.Property<long>("OrderAmount");

                    b.Property<int>("OrderTypeId");

                    b.Property<int>("PaymentTypeId");

                    b.Property<string>("TransactionId");

                    b.HasKey("Id");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ABD.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("ABD.Entities.PricingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal>("PerCreditRate")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("PricingRules");
                });

            modelBuilder.Entity("ABD.Entities.ProductLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ProductLines");
                });

            modelBuilder.Entity("ABD.Entities.Record", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DunsNumber")
                        .HasColumnType("char(12)");

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<decimal?>("AreaCode")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("BranchIndicator")
                        .HasMaxLength(1);

                    b.Property<string>("CEOName")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("CityCode")
                        .HasMaxLength(4);

                    b.Property<string>("Company")
                        .HasMaxLength(50);

                    b.Property<string>("CountyCode")
                        .HasMaxLength(3);

                    b.Property<string>("CountyName")
                        .HasMaxLength(100);

                    b.Property<string>("DunsNumberFM")
                        .HasMaxLength(11);

                    b.Property<decimal?>("Employees")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("EmployeesHere")
                        .HasMaxLength(20);

                    b.Property<string>("EmployeesTotal")
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Latitude")
                        .HasMaxLength(50);

                    b.Property<string>("LineOfBusiness")
                        .HasMaxLength(20);

                    b.Property<string>("Longitude")
                        .HasMaxLength(50);

                    b.Property<string>("MRCCode")
                        .HasMaxLength(4);

                    b.Property<string>("Manufacturing")
                        .HasMaxLength(1);

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(2);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("PopulationCode")
                        .HasMaxLength(1);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10);

                    b.Property<string>("SIC")
                        .HasMaxLength(20);

                    b.Property<string>("SIC1")
                        .HasMaxLength(20);

                    b.Property<string>("SIC6")
                        .HasMaxLength(6);

                    b.Property<string>("SIC6Desc")
                        .HasMaxLength(100);

                    b.Property<string>("SIC8")
                        .HasMaxLength(10);

                    b.Property<string>("SIC8Description")
                        .HasMaxLength(100);

                    b.Property<string>("SMSACode")
                        .HasMaxLength(3);

                    b.Property<string>("SMSAStateCode")
                        .HasMaxLength(5);

                    b.Property<decimal?>("Sales")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("SalesVolume")
                        .HasMaxLength(20);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("StateCode")
                        .HasMaxLength(2);

                    b.Property<string>("StateCounty")
                        .HasMaxLength(20);

                    b.Property<string>("Suffix")
                        .HasMaxLength(3);

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<string>("TradeName")
                        .HasMaxLength(50);

                    b.Property<string>("WorkersCompCarrier")
                        .HasMaxLength(200);

                    b.Property<decimal?>("WorkersCompMonth")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("WorkersCompXDate");

                    b.Property<string>("Zip")
                        .HasMaxLength(9);

                    b.Property<string>("Zip3")
                        .HasMaxLength(3);

                    b.Property<string>("Zip5")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("RECORDS");
                });

            modelBuilder.Entity("ABD.Entities.RsSICCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ParentId")
                        .HasMaxLength(50);

                    b.Property<int?>("PositionCount");

                    b.Property<string>("SIC")
                        .HasMaxLength(50);

                    b.Property<string>("SICCodeId")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("RS_SICCodes");
                });

            modelBuilder.Entity("ABD.Entities.RsState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("RS_States");
                });

            modelBuilder.Entity("ABD.Entities.SpecialAffiliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SpecialAffiliations");
                });

            modelBuilder.Entity("ABD.Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessLevel");

                    b.Property<int?>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Options");

                    b.Property<string>("TypeName");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("ABD.Entities.TargetSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .HasMaxLength(128);

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("char(12)");

                    b.Property<string>("Description")
                        .HasMaxLength(128);

                    b.Property<string>("SicCode")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("TargetSectorsDB");
                });

            modelBuilder.Entity("ABD.Entities.UserExcludeAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .HasColumnType("char(12)");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserExcludeAccounts");
                });

            modelBuilder.Entity("ABD.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ADActiveDate");

                    b.Property<DateTime?>("ADExpiresDate");

                    b.Property<bool?>("Active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("AgencyRec");

                    b.Property<decimal?>("AgencyRecPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("BDActiveDate");

                    b.Property<int?>("BDCredits");

                    b.Property<string>("BillAddress")
                        .HasMaxLength(255);

                    b.Property<string>("BillCity")
                        .HasMaxLength(128);

                    b.Property<string>("BillCompany")
                        .HasMaxLength(255);

                    b.Property<string>("BillCountry")
                        .HasMaxLength(128);

                    b.Property<string>("BillFName")
                        .HasMaxLength(255);

                    b.Property<string>("BillLName")
                        .HasMaxLength(255);

                    b.Property<string>("BillState")
                        .HasMaxLength(128);

                    b.Property<string>("BillZip")
                        .HasMaxLength(128);

                    b.Property<int?>("ByPassCard");

                    b.Property<DateTime?>("CCActiveDate");

                    b.Property<int?>("CCAmount");

                    b.Property<DateTime?>("CCExpiresDate");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255);

                    b.Property<int?>("ContactRec");

                    b.Property<decimal?>("ContactRecPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Fax")
                        .HasMaxLength(128);

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsSalesPerson");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Mobile")
                        .HasMaxLength(128);

                    b.Property<string>("NOTES")
                        .HasMaxLength(400);

                    b.Property<bool?>("QUpdates");

                    b.Property<string>("SUSERID")
                        .HasMaxLength(255);

                    b.Property<string>("State")
                        .HasMaxLength(128);

                    b.Property<int?>("SubType");

                    b.Property<bool?>("TCAgreed");

                    b.Property<DateTime?>("TCDate");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("UserId");

                    b.Property<string>("Web")
                        .HasMaxLength(128);

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("ABD.Entities.ZipCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("Zip")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("RS_ZipCodes");
                });

            modelBuilder.Entity("ABD.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ReturnValue");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("ABD.Authorization.Roles.Role", b =>
                {
                    b.HasOne("ABD.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ABD.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ABD.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ABD.Authorization.Users.User", b =>
                {
                    b.HasOne("ABD.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ABD.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ABD.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("ABD.Entities.Payment", b =>
                {
                    b.HasOne("ABD.Entities.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ABD.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ABD.Entities.UserProfile", b =>
                {
                    b.HasOne("ABD.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ABD.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("ABD.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ABD.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("ABD.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("ABD.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("ABD.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("ABD.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("ABD.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("ABD.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("ABD.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("ABD.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("ABD.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
